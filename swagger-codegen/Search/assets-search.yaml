openapi: 3.0.3

info:
  title: Activated Assets' Search API
  description: API definition for Activated Assets' Search Capabilities
  version: 0.2.0-experimental
security:
  - Bearer: []
    ApiKey: []
servers:
  - url: 'https://delivery-p{programId}-e{environmentId}.adobeaemcloud.com'
    variables:
      programId:
        default: "12345"
        description: a demo program ID - to be substituted with customer's program ID
      environmentId:
        default: "654321"
        description: a demo environment ID - to be substituted with customer's environment ID

paths:
  /adobe/assets/search:
    post:
      summary: Search for activated assets based on specified criteria
      operationId: search
      tags:
        - Activated Assets Search
      description: Search Activated Assets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKey:
      type: apiKey
      in: header
      name: X-Api-Key
  schemas:

    CompositeQuery:
      description: A composite query is a combination of clauses, each of which can itself be a composite query
      anyOf:
        - $ref: '#/components/schemas/OrQuery'
        - $ref: '#/components/schemas/AndQuery'
        - $ref: '#/components/schemas/NotQuery'
        - $ref: '#/components/schemas/MatchQuery'
        - $ref: '#/components/schemas/TermQuery'
        - $ref: '#/components/schemas/RangeQuery'

    OrQuery:
      description: |
        Logical or operator. The results must match at least one of the sub-queries.
        e.g.
        ```
        "or": [
          {
            "match": {
              "text": "car"
            }
          },
          {
            "match": {
              "text": "bus"
            }
          }
        ]
        ```
      additionalProperties: false
      type: object
      properties:
        or:
          type: array
          items:
            $ref: '#/components/schemas/CompositeQuery'
      required:
        - or

    AndQuery:
      description: |
        Logical and operator. The results must match all the sub-queries in this clause.
        e.g.
        ```
        "and": [
          {
            "match": {
              "text": "blue"
            }
          },
          {
            "match": {
              "text": "white"
            }
          }
        ]
        ```
      additionalProperties: false
      type: object
      properties:
        and:
          type: array
          items:
            $ref: '#/components/schemas/CompositeQuery'
      required:
        - and

    NotQuery:
      description: |
        Logical not operator. All matches are excluded from the results
        e.g.
        ```
        "not": [
          "term": {
            "metadata.repository.dc:format": [
              "video/mp4"
            ]
          }
        ]
        ```
      additionalProperties: false
      type: object
      properties:
        not:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/CompositeQuery'
      required:
        - not

    MatchQuery:
      description: |
        Search for Full text (supports contains/startswith/endswith/fuzzy)
        e.g.
        ```
        "match": {
          "text": "crocs",
          "operator": "contains",
          "fields": [
            "metadata.repository.repo:name",
            "metadata.application.xcm:machineKeywords.value"
          ]
        }
        ```
      additionalProperties: false
      type: object
      properties:
        match:
          type: object
          properties:
            fields:
              description: fields to search text in (optional)
              type: array
              minItems: 1
              maxItems: 20
              items:
                type: string
                maxLength: 256
            text:
              description: |
                the text to search. An empty string searches for everything.
              type: string
              maxLength: 256
            operator:
              type: string
              enum: [contains, startsWith, endsWith, fuzzy]
              default: fuzzy
              description: |
                Defines how to interpret the `text` input
                * `contains` : Give all results where string has anything before and after the string text: *text*
                * `startsWith`: Give all results where string has anything staring with text: text*
                * `endsWith`: Give all results where string has anything ending with text: *text
                * `fuzzy`: Give fuzzy search results (edit distance - 1 or 2) with string text and some spelling mistakes are permissible : text~
          example:
            text: ocean
            operator: contains
          required:
            - text
      required:
        - match

    TermQuery:
      description: |
        Search for the query-term exactly matching the value of a specific field.

        The `key` of the `term` object identifies the field whose value should be matched,
        `value` represents what to match against.

        The API supports multi-valued fields.

        In case multiple values are specified in the query clause, result-set includes documents where at least one
        of the specified values matches the value present in the field
        e.g.
        ```
        "term": {
          "metadata.repository.dc:format" : ["image/png","image/jpeg"]
        }
        ```
        will match documents where the value of `metadata.repository.dc:format` is either png or jpeg.

        Term query supports only a single field in term clause. For searching on multiple fields term should be 
        composed with AND, OR, NOT queries as per the need.
      properties:
        term:
          type: object
          minProperties: 1
          maxProperties: 1
          additionalProperties:
            type: array
            items:
              minItems: 1
              maxItems: 20
              oneOf:
                - type: string
                  maxLength: 256
                - type: string
                  format: date-time
                - type: number

          example:
            "metadata.repository.dc:format" : ["image/png","image/jpeg"]
      required:
        - term

    RangeQuery:
      description: |
        Returns documents that contain terms within the provided range. The acceptable types for range includes:
          * numbers (integer, double, long, float)
          * dates (represented as String compliant with [ISO 8601 representation](https://www.w3.org/TR/NOTE-datetime-970915.html))
          e.g.
          ```
            "range": {
              "metadata.repository:repo:createDate": {
                "lt": "2023-01-04T13:49:00.00Z",
                "gte": "2023-02-07T00:00:00.00Z"
              }
            }
          ```
      additionalProperties: false
      properties:
        range:
          type: object
          additionalProperties:
            type: object
            properties:
              gt:
                type: object
                description: Greater-than
              gte:
                type: object
                description: Greater-than or equal-to
              lt:
                type: object
                description: Less-than
              lte:
                type: object
                description: Less-than or equal-to

          example:
            "metadata.size":
              lt:
                20000000
              gte:
                50
      required:
        - range

    Sortable:
      type: object
      properties:
        by:
          description: field name on which to order search results, ignored if not present in the data (wrongly specified)
          type: string
          maxLength: 100
          example: size
        order:
          description: sorting order - ascending or descending
          type: string
          enum: [asc, desc]
          default: asc
      required:
        - by
        - order
      example:
        by:
          "metadata.size"
        order:
          "asc"

    SearchRequest:
      type: object
      properties:
        query:
          type: array
          minItems: 1
          maxItems: 20
          items:
            $ref: '#/components/schemas/CompositeQuery'
        sort:
          description: |
            Sort attributes are applied to the query results in the order they are present
            e.g.
            ```
            "sort": [
              {
                "by": "metadata.size",
                "order": "desc"
              },
              {
                "by": "metadata.repository.repo:createDate",
                "order": "asc"
              }
            ]
            ```
            will return results ordered first by size and then by format
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: '#/components/schemas/Sortable'
        projectedFields:
          description: List of names of fields to be present in the search result (Optional, 'all' if not specified)
          type: array
          items:
            maxItems: 100
            type: string
            description: supports wildcards (*) to match multiple field names
        limit:
          description: Maximum number of results to be returned
          type: integer
          default: 50
          minimum: 1
          maximum: 100
        offset:
          description: The number of records that need to be skipped
          type: integer
          default: 0
          minimum: 0
          maximum: 10000
      required:
        - query

    Identifier:
      type: string
      pattern: '^(urn:)([a-z0-9-]{1,30}:)?([a-z0-9-_]{1,}:)?[0-9a-z-]{8,128}$'
      maxLength: 256

    Asset:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Identifier'
        repositoryId:
          $ref: '#/components/schemas/Identifier'
        metadata:
          type: object
      required:
        - id
        - repositoryId

    SearchResponse:
      additionalProperties: false
      type: object
      properties:
        hits:
          type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/Asset"
        search_metadata:
          type: object
          properties:
            count:
              type: integer
              minimum: 0
            took:
              type: integer
              format: int64
          required:
            - count
            - took
      required:
        - hits
        - search_metadata

    Problem:
      type: object
      properties:
        title:
          type: string
          maxLength: 256
        detail:
          type: string
          maxLength: 256
        instance:
          type: string
          maxLength: 256
      required:
        - title
      additionalProperties: true

  responses:
    SearchResponse:
      description: Successful search response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SearchResponse"

    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"

    BadRequestError:
      description: Request is malformed or not in an expected format
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"

    InternalServerError:
      description: Request processing failure
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"