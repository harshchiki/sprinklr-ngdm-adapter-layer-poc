/*
 * Activated Assets' Search API
 * API definition for Activated Assets' Search Capabilities
 *
 * OpenAPI spec version: 0.2.0-experimental
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Search for the query-term exactly matching the value of a specific field.  The &#x60;key&#x60; of the &#x60;term&#x60; object identifies the field whose value should be matched, &#x60;value&#x60; represents what to match against.  The API supports multi-valued fields.  In case multiple values are specified in the query clause, result-set includes documents where at least one of the specified values matches the value present in the field e.g. &#x60;&#x60;&#x60; \&quot;term\&quot;: {   \&quot;metadata.repository.dc:format\&quot; : [\&quot;image/png\&quot;,\&quot;image/jpeg\&quot;] } &#x60;&#x60;&#x60; will match documents where the value of &#x60;metadata.repository.dc:format&#x60; is either png or jpeg.  Term query supports only a single field in term clause. For searching on multiple fields term should be  composed with AND, OR, NOT queries as per the need. 
 */
@Schema(description = "Search for the query-term exactly matching the value of a specific field.  The `key` of the `term` object identifies the field whose value should be matched, `value` represents what to match against.  The API supports multi-valued fields.  In case multiple values are specified in the query clause, result-set includes documents where at least one of the specified values matches the value present in the field e.g. ``` \"term\": {   \"metadata.repository.dc:format\" : [\"image/png\",\"image/jpeg\"] } ``` will match documents where the value of `metadata.repository.dc:format` is either png or jpeg.  Term query supports only a single field in term clause. For searching on multiple fields term should be  composed with AND, OR, NOT queries as per the need. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-30T19:07:33.419517+05:30[Asia/Kolkata]")
public class TermQuery implements CompositeQuery {
  @SerializedName("term")
  private Map<String, List<Object>> term = new HashMap<String, List<Object>>();

  public TermQuery term(Map<String, List<Object>> term) {
    this.term = term;
    return this;
  }

  public TermQuery putTermItem(String key, List<Object> termItem) {
    this.term.put(key, termItem);
    return this;
  }

   /**
   * Get term
   * @return term
  **/
  @Schema(example = "{\"metadata.repository.dc:format\":[\"image/png\",\"image/jpeg\"]}", required = true, description = "")
  public Map<String, List<Object>> getTerm() {
    return term;
  }

  public void setTerm(Map<String, List<Object>> term) {
    this.term = term;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TermQuery termQuery = (TermQuery) o;
    return Objects.equals(this.term, termQuery.term);
  }

  @Override
  public int hashCode() {
    return Objects.hash(term);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TermQuery {\n");
    
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
