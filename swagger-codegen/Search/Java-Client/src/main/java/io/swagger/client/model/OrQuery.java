/*
 * Activated Assets' Search API
 * API definition for Activated Assets' Search Capabilities
 *
 * OpenAPI spec version: 0.2.0-experimental
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CompositeQuery;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Logical or operator. The results must match at least one of the sub-queries. e.g. &#x60;&#x60;&#x60; \&quot;or\&quot;: [   {     \&quot;match\&quot;: {       \&quot;text\&quot;: \&quot;car\&quot;     }   },   {     \&quot;match\&quot;: {       \&quot;text\&quot;: \&quot;bus\&quot;     }   } ] &#x60;&#x60;&#x60; 
 */
@Schema(description = "Logical or operator. The results must match at least one of the sub-queries. e.g. ``` \"or\": [   {     \"match\": {       \"text\": \"car\"     }   },   {     \"match\": {       \"text\": \"bus\"     }   } ] ``` ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-30T19:07:33.419517+05:30[Asia/Kolkata]")
public class OrQuery implements CompositeQuery {
  @SerializedName("or")
  private List<CompositeQuery> or = new ArrayList<CompositeQuery>();

  public OrQuery or(List<CompositeQuery> or) {
    this.or = or;
    return this;
  }

  public OrQuery addOrItem(CompositeQuery orItem) {
    this.or.add(orItem);
    return this;
  }

   /**
   * Get or
   * @return or
  **/
  @Schema(required = true, description = "")
  public List<CompositeQuery> getOr() {
    return or;
  }

  public void setOr(List<CompositeQuery> or) {
    this.or = or;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrQuery orQuery = (OrQuery) o;
    return Objects.equals(this.or, orQuery.or);
  }

  @Override
  public int hashCode() {
    return Objects.hash(or);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrQuery {\n");
    
    sb.append("    or: ").append(toIndentedString(or)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
