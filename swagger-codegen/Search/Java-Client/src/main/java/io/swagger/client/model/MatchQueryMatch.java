/*
 * Activated Assets' Search API
 * API definition for Activated Assets' Search Capabilities
 *
 * OpenAPI spec version: 0.2.0-experimental
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * MatchQueryMatch
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-30T19:07:33.419517+05:30[Asia/Kolkata]")
public class MatchQueryMatch {
  @SerializedName("fields")
  private List<String> fields = null;

  @SerializedName("text")
  private String text = null;

  /**
   * Defines how to interpret the &#x60;text&#x60; input * &#x60;contains&#x60; : Give all results where string has anything before and after the string text: *text* * &#x60;startsWith&#x60;: Give all results where string has anything staring with text: text* * &#x60;endsWith&#x60;: Give all results where string has anything ending with text: *text * &#x60;fuzzy&#x60;: Give fuzzy search results (edit distance - 1 or 2) with string text and some spelling mistakes are permissible : text~ 
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    CONTAINS("contains"),
    STARTSWITH("startsWith"),
    ENDSWITH("endsWith"),
    FUZZY("fuzzy");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OperatorEnum fromValue(String input) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OperatorEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("operator")
  private OperatorEnum operator = OperatorEnum.FUZZY;

  public MatchQueryMatch fields(List<String> fields) {
    this.fields = fields;
    return this;
  }

  public MatchQueryMatch addFieldsItem(String fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<String>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * fields to search text in (optional)
   * @return fields
  **/
  @Schema(description = "fields to search text in (optional)")
  public List<String> getFields() {
    return fields;
  }

  public void setFields(List<String> fields) {
    this.fields = fields;
  }

  public MatchQueryMatch text(String text) {
    this.text = text;
    return this;
  }

   /**
   * the text to search. An empty string searches for everything. 
   * @return text
  **/
  @Schema(required = true, description = "the text to search. An empty string searches for everything. ")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public MatchQueryMatch operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

   /**
   * Defines how to interpret the &#x60;text&#x60; input * &#x60;contains&#x60; : Give all results where string has anything before and after the string text: *text* * &#x60;startsWith&#x60;: Give all results where string has anything staring with text: text* * &#x60;endsWith&#x60;: Give all results where string has anything ending with text: *text * &#x60;fuzzy&#x60;: Give fuzzy search results (edit distance - 1 or 2) with string text and some spelling mistakes are permissible : text~ 
   * @return operator
  **/
  @Schema(description = "Defines how to interpret the `text` input * `contains` : Give all results where string has anything before and after the string text: *text* * `startsWith`: Give all results where string has anything staring with text: text* * `endsWith`: Give all results where string has anything ending with text: *text * `fuzzy`: Give fuzzy search results (edit distance - 1 or 2) with string text and some spelling mistakes are permissible : text~ ")
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchQueryMatch matchQueryMatch = (MatchQueryMatch) o;
    return Objects.equals(this.fields, matchQueryMatch.fields) &&
        Objects.equals(this.text, matchQueryMatch.text) &&
        Objects.equals(this.operator, matchQueryMatch.operator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, text, operator);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchQueryMatch {\n");
    
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
