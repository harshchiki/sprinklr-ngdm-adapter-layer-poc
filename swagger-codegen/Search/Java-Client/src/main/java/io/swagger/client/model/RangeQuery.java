/*
 * Activated Assets' Search API
 * API definition for Activated Assets' Search Capabilities
 *
 * OpenAPI spec version: 0.2.0-experimental
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.RangeQueryRange;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Returns documents that contain terms within the provided range. The acceptable types for range includes:   * numbers (integer, double, long, float)   * dates (represented as String compliant with [ISO 8601 representation](https://www.w3.org/TR/NOTE-datetime-970915.html))   e.g.   &#x60;&#x60;&#x60;     \&quot;range\&quot;: {       \&quot;metadata.repository:repo:createDate\&quot;: {         \&quot;lt\&quot;: \&quot;2023-01-04T13:49:00.00Z\&quot;,         \&quot;gte\&quot;: \&quot;2023-02-07T00:00:00.00Z\&quot;       }     }   &#x60;&#x60;&#x60; 
 */
@Schema(description = "Returns documents that contain terms within the provided range. The acceptable types for range includes:   * numbers (integer, double, long, float)   * dates (represented as String compliant with [ISO 8601 representation](https://www.w3.org/TR/NOTE-datetime-970915.html))   e.g.   ```     \"range\": {       \"metadata.repository:repo:createDate\": {         \"lt\": \"2023-01-04T13:49:00.00Z\",         \"gte\": \"2023-02-07T00:00:00.00Z\"       }     }   ``` ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-30T19:07:33.419517+05:30[Asia/Kolkata]")
public class RangeQuery implements CompositeQuery {
  @SerializedName("range")
  private Map<String, RangeQueryRange> range = new HashMap<String, RangeQueryRange>();

  public RangeQuery range(Map<String, RangeQueryRange> range) {
    this.range = range;
    return this;
  }

  public RangeQuery putRangeItem(String key, RangeQueryRange rangeItem) {
    this.range.put(key, rangeItem);
    return this;
  }

   /**
   * Get range
   * @return range
  **/
  @Schema(example = "{\"metadata.size\":{\"lt\":20000000,\"gte\":50}}", required = true, description = "")
  public Map<String, RangeQueryRange> getRange() {
    return range;
  }

  public void setRange(Map<String, RangeQueryRange> range) {
    this.range = range;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RangeQuery rangeQuery = (RangeQuery) o;
    return Objects.equals(this.range, rangeQuery.range);
  }

  @Override
  public int hashCode() {
    return Objects.hash(range);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RangeQuery {\n");
    
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
